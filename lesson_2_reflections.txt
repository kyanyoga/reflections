What happens when you initialize a repository? Why do you need to do it?
git init # sets up an existing directory with existing files or can be used
to set up a completely new directory with clean files. 

How is the staging area different from the working directory and the repository?
What value do you think it offers?
git status, git add # to add files to stagging
[ working directory]<->[ stagging area ]<->[ repository: commit1 ]

How can you use the staging area to make sure you have one commit per logical
change?
git diff [working directory] -> [ staging ]
git diff id_old id_new
git diff --staged # show what has not been commited [ staging ]-> [commit1]
git reset --hard [ dump the changes ]

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
git branch # list branches 
*master
git branch easy_mode # create new label/branch
git checkout easy_mode # jump to that label/branch
git commit -m "made the game easier"
-or-
git checkout -b easy_mode

# keep you product organised
*master
*dev
*exp [ experimental ]
[ add a new feature : like a context switch ]
[ you can create multiple branches and work on more than one feature ]

How do the diagrams help you visualize the branch structure?
git log --graph --oneline master coins
some branch commits may not be able to reach other branch commits.
they are not [reachable]

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

git merge # will merge file changes and add auto commit message
git branch -d coins [ delete the label ]

git show

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
