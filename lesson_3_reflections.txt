
When would you want to use a remote repository rather than keeping all your work
local?

    so you can share you work, collaborate.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    you never know when you will have a logical seperation in code implementation of bug fix

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    fork is like branching but is done on github to copy a repository.
    clone will bring down a repository from github
    branching allows for a local fork of the code to make changes, fix bugs, add feature
    
What is the benefit of having a copy of the last known state of the remote
stored locally?

    so you can track changes to revert to a known good state
    git fetch # will update your local remote : origin/master with the current change.
    # this is great to keep up with the most current changes on the remote - github repository.
    git pull origin master # is the same as the following two lines.
    git fetch origin  # you can run git diff to see the changes
   
    # git merge master origin/master [ old way ]
    git push [ push master to origin/master ]
    
    # pull request - more work when working in teams.
    # create branch git checkout -b "hotfix" , fix code, add file, commit git push hotfix, pull request.
    # git push origin htfx1  - git push origin "branch name"
    # do a compare, pull request, approve it if its ok, then delete the hotfix or feature branch on github
    # delete the the hotfix branch on the local repository
    
    # git status - find out where you are right now.
    
    # normal commits are fast-forward merges with the ancestry data always available
    # its about reachability

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    copy files back and forth. It would make it very hard.
    
When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    when you want to used the Udacity create branch (utility branch for the feature merge) -> then pull request -> peer review
    (any updates) -> pull back any other changes -> merge changes -> push a final time (green pull request merge), merge pull.
    clean up utility branches on localhost and github.
    
    # add 'upstream' to your fork to pull any changes into your master before merging and pull request. see udacity
    
